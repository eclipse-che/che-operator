// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheCluster":            schema_pkg_apis_org_v1_CheCluster(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpec":        schema_pkg_apis_org_v1_CheClusterSpec(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecAuth":    schema_pkg_apis_org_v1_CheClusterSpecAuth(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecDB":      schema_pkg_apis_org_v1_CheClusterSpecDB(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecK8SOnly": schema_pkg_apis_org_v1_CheClusterSpecK8SOnly(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecServer":  schema_pkg_apis_org_v1_CheClusterSpecServer(ref),
		"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecStorage": schema_pkg_apis_org_v1_CheClusterSpecStorage(ref),
	}
}

func schema_pkg_apis_org_v1_CheCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CheCluster is the Schema for the ches API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpec", "github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CheClusterSpec defines the desired state of CheCluster",
				Properties: map[string]spec.Schema{
					"server": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecServer"),
						},
					},
					"database": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecDB"),
						},
					},
					"auth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecAuth"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecStorage"),
						},
					},
					"k8s": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecK8SOnly"),
						},
					},
				},
				Required: []string{"server", "database", "auth", "storage"},
			},
		},
		Dependencies: []string{
			"github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecAuth", "github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecDB", "github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecK8SOnly", "github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecServer", "github.com/eclipse/che-operator/pkg/apis/org/v1.CheClusterSpecStorage"},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpecAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"externalIdentityProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalIdentityProvider instructs operator on whether or not to deploy Keycloak/RH SSO instance. When set to true provision connection details",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"identityProviderURL": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderURL is retrieved from respective route/ingress unless explicitly specified in CR (when externalIdentityProvider is true)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderAdminUserName": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderURL is retrieved from respective route/ingress unless explicitly specified in CR (when externalIdentityProvider is true) IdentityProviderURL string `json:\"identityProviderURL\"` IdentityProviderAdminUserName is a desired admin username of Keycloak admin user (applicable only when externalIdentityProvider is false)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderPassword is a desired password of Keycloak admin user (applicable only when externalIdentityProvider is false)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderRealm": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderRealm is name of a keycloak realm. When externalIdentityProvider is false this realm will be created, otherwise passed to Che server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderClientId": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderClientId is id of a keycloak client. When externalIdentityProvider is false this client will be created, otherwise passed to Che server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderPostgresPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderPostgresPassword is password for keycloak database user. Auto generated if left blank",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"updateAdminPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "UpdateAdminPassword forces the default admin Che user to update password on first login. False by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"openShiftoAuth": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenShiftOauth instructs an Operator to enable OpenShift v3 identity provider in Keycloak, as well as create respective oAuthClient and configure Che configMap accordingly",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"oAuthClientName": {
						SchemaProps: spec.SchemaProps{
							Description: "OauthClientName is name of oAuthClient used in OpenShift v3 identity provider in Keycloak realm. Auto generated if left blank",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"oAuthSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "OauthSecret is secret used in oAuthClient. Auto generated if left blank",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderImage": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderImage is image:tag used in Keycloak deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identityProviderImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "IdentityProviderImagePullPolicy is the image pull policy used in Keycloak registry deployment: default value is Always",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpecDB(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"externalDb": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalDB instructs the operator either to skip deploying Postgres, and passes connection details of existing DB to Che server (when set to true) or a new Postgres deployment is created",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"chePostgresHostName": {
						SchemaProps: spec.SchemaProps{
							Description: "ChePostgresDBHostname is Postgres Database hostname that Che server uses to connect to. Defaults to postgres",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chePostgresPort": {
						SchemaProps: spec.SchemaProps{
							Description: "ChePostgresPort is Postgres Database port that Che server uses to connect to. Defaults to 5432",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chePostgresUser": {
						SchemaProps: spec.SchemaProps{
							Description: "ChePostgresUser is Postgres user that Che server when making a db connection. Defaults to pgche",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chePostgresPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "ChePostgresPassword is password of a postgres user. Auto-generated when left blank",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chePostgresDb": {
						SchemaProps: spec.SchemaProps{
							Description: "ChePostgresDb is Postgres database name that Che server uses to connect to. Defaults to dbche",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresImage": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresImage is an image used in Postgres deployment in format image:tag. Defaults to registry.redhat.io/rhscl/postgresql-96-rhel7 (see pkg/deploy/defaults.go for latest tag)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresImagePullPolicy is the image pull policy used in Postgres registry deployment: default value is Always",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpecK8SOnly(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"ingressDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressDomain is a global ingress domain for a k8s cluster. Must be explicitly specified in CR. There are no defaults",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingressStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressStrategy is the way ingresses are created. Casn be multi-host (host is explicitly provided in ingress), single-host (host is provided, path based rules) and default-host *(no host is provided, path based rules)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingressClass": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressClass is kubernetes.io/ingress.class, defaults to nginx",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tlsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "secret name used for tls termination",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContextFsGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "FSGroup the Che POD and Workspace pod containers should run in",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"securityContextRunAsUser": {
						SchemaProps: spec.SchemaProps{
							Description: "User the Che POD and Workspace pod containers should run as",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpecServer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"airGapContainerRegistryHostname": {
						SchemaProps: spec.SchemaProps{
							Description: "AirGapContainerRegistryHostname is the hostname to the internal registry to pull images from in the air-gapped environment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"airGapContainerRegistryOrganization": {
						SchemaProps: spec.SchemaProps{
							Description: "AirGapContainerRegistryOrganization is the repository name in the registry to pull images from in the air-gapped environment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheImage": {
						SchemaProps: spec.SchemaProps{
							Description: "CheImage is a server image used in Che deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheImageTag": {
						SchemaProps: spec.SchemaProps{
							Description: "CheImageTag is a tag of an image used in Che deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CheImagePullPolicy is the image pull policy used in Che registry deployment: default value is Always",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheFlavor": {
						SchemaProps: spec.SchemaProps{
							Description: "CheFlavor is an installation flavor. Can be 'che' - upstream or 'codeready' - CodeReady Workspaces. Defaults to 'che'",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheHost": {
						SchemaProps: spec.SchemaProps{
							Description: "CheHost is an env consumer by server. Detected automatically from Che route",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheLogLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "CheLostLevel is log level for Che server: INFO or DEBUG. Defaults to INFO",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheDebug": {
						SchemaProps: spec.SchemaProps{
							Description: "CheDebug is debug mode for Che server. Defaults to false",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheWorkspaceClusterRole": {
						SchemaProps: spec.SchemaProps{
							Description: "CustomClusterRoleName specifies a custom cluster role to user for the Che workspaces The default roles are used if this is left blank.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfSignedCert": {
						SchemaProps: spec.SchemaProps{
							Description: "SelfSignedCert signal about the necessity to get OpenShift router tls secret and extract certificate to add it to Java trust store for Che server",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"tlsSupport": {
						SchemaProps: spec.SchemaProps{
							Description: "TlsSupport instructs an operator to deploy Che in TLS mode, ie with TLS routes or ingresses",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"devfileRegistryUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "DevfileRegistryUrl is an endpoint serving sample ready-to-use devfiles. Defaults to generated route",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devfileRegistryImage": {
						SchemaProps: spec.SchemaProps{
							Description: "DevfileRegistryImage is image:tag used in Devfile registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devfileRegistryPullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "DevfileRegistryImagePullPolicy is the image pull policy used in Devfile registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devfileRegistryMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "DevfileRegistryMemoryLimit is the memory limit used in Devfile registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devfileRegistryMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "DevfileRegistryMemoryRequest is the memory request used in Devfile registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalDevfileRegistry": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalDevfileRegistry instructs operator on whether or not to deploy a dedicated Devfile registry server By default a dedicated devfile registry server is started. But if ExternalDevfileRegistry is `true`, then no such dedicated server will be started by the operator",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pluginRegistryUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "PluginRegistryUrl is an endpoint serving plugin definitions. Defaults to generated route",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pluginRegistryImage": {
						SchemaProps: spec.SchemaProps{
							Description: "PluginRegistryImage is image:tag used in Plugin registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pluginRegistryPullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "PluginRegistryImagePullPolicy is the image pull policy used in Plugin registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pluginRegistryMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "PluginRegistryMemoryLimit is the memory limit used in Plugin registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pluginRegistryMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "PluginRegistryMemoryRequest is the memory request used in Plugin registry deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalPluginRegistry": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalPluginRegistry instructs operator on whether or not to deploy a dedicated Plugin registry server By default a dedicated plugin registry server is started. But if ExternalPluginRegistry is `true`, then no such dedicated server will be started by the operator",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"customCheProperties": {
						SchemaProps: spec.SchemaProps{
							Description: "CustomCheProperties is a list of additional environment variables that will be applied in the che config map, in addition to the values already generated from other fields of the custom resource (CR). If CustomCheProperties contains a property that would be normally generated in che config map from other CR fields, then the value in the CustomCheProperties will be used.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"proxyURL": {
						SchemaProps: spec.SchemaProps{
							Description: "ProxyURL is protocol+hostname of a proxy server. Automatically added as JAVA_OPTS and https(s)_proxy to Che server and workspaces containers",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyPort": {
						SchemaProps: spec.SchemaProps{
							Description: "ProxyPort is port of a proxy server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nonProxyHosts": {
						SchemaProps: spec.SchemaProps{
							Description: "NonProxyHosts is a list of non-proxy hosts. Use | as delimiter, eg localhost|my.host.com|123.42.12.32",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyUser": {
						SchemaProps: spec.SchemaProps{
							Description: "ProxyUser is username for a proxy server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"proxyPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "ProxyPassword is password for a proxy user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "ServerMemoryRequest sets mem request for server deployment. Defaults to 512Mi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "ServerMemoryLimit sets mem limit for server deployment. Defaults to 1Gi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_org_v1_CheClusterSpecStorage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"pvcStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "PvcStrategy is a persistent volume claim strategy for Che server. Can be common (all workspaces PVCs in one volume), per-workspace (one PVC per workspace for all declared volumes) and unique (one PVC per declared volume). Defaults to common",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pvcClaimSize": {
						SchemaProps: spec.SchemaProps{
							Description: "PvcClaimSize is size of a persistent volume claim for workspaces. Defaults to 1Gi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preCreateSubPaths": {
						SchemaProps: spec.SchemaProps{
							Description: "PreCreateSubPaths instructs Che server to launch a special pod to precreate a subpath in a PV",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pvcJobsImage": {
						SchemaProps: spec.SchemaProps{
							Description: "PvcJobsImage is image:tag for preCreateSubPaths jobs",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresPVCStorageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresPVCStorageClassName is storage class for a postgres pvc. Empty string by default, which means default storage class is used",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workspacePVCStorageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkspacePVCStorageClassName is storage class for a workspaces pvc. Empty string by default, which means default storage class is used",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
