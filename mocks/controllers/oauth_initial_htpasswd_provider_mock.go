// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/che/oauth_initial_htpasswd_provider.go

// Package mock_che is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	deploy "github.com/eclipse-che/che-operator/pkg/deploy"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/config/v1"
)

// MockOpenShiftOAuthUserHandler is a mock of OpenShiftOAuthUserHandler interface
type MockOpenShiftOAuthUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftOAuthUserHandlerMockRecorder
}

// MockOpenShiftOAuthUserHandlerMockRecorder is the mock recorder for MockOpenShiftOAuthUserHandler
type MockOpenShiftOAuthUserHandlerMockRecorder struct {
	mock *MockOpenShiftOAuthUserHandler
}

// NewMockOpenShiftOAuthUserHandler creates a new mock instance
func NewMockOpenShiftOAuthUserHandler(ctrl *gomock.Controller) *MockOpenShiftOAuthUserHandler {
	mock := &MockOpenShiftOAuthUserHandler{ctrl: ctrl}
	mock.recorder = &MockOpenShiftOAuthUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftOAuthUserHandler) EXPECT() *MockOpenShiftOAuthUserHandlerMockRecorder {
	return m.recorder
}

// SyncOAuthInitialUser mocks base method
func (m *MockOpenShiftOAuthUserHandler) SyncOAuthInitialUser(openshiftOAuth *v1.OAuth, deployContext *deploy.DeployContext) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncOAuthInitialUser", openshiftOAuth, deployContext)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncOAuthInitialUser indicates an expected call of SyncOAuthInitialUser
func (mr *MockOpenShiftOAuthUserHandlerMockRecorder) SyncOAuthInitialUser(openshiftOAuth, deployContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncOAuthInitialUser", reflect.TypeOf((*MockOpenShiftOAuthUserHandler)(nil).SyncOAuthInitialUser), openshiftOAuth, deployContext)
}

// DeleteOAuthInitialUser mocks base method
func (m *MockOpenShiftOAuthUserHandler) DeleteOAuthInitialUser(deployContext *deploy.DeployContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuthInitialUser", deployContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOAuthInitialUser indicates an expected call of DeleteOAuthInitialUser
func (mr *MockOpenShiftOAuthUserHandlerMockRecorder) DeleteOAuthInitialUser(deployContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuthInitialUser", reflect.TypeOf((*MockOpenShiftOAuthUserHandler)(nil).DeleteOAuthInitialUser), deployContext)
}
