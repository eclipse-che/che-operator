// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/che/permission_checker.go

// Package mock_che is a generated GoMock package.
package mock_che

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
)

// MockPermissionChecker is a mock of PermissionChecker interface
type MockPermissionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionCheckerMockRecorder
}

// MockPermissionCheckerMockRecorder is the mock recorder for MockPermissionChecker
type MockPermissionCheckerMockRecorder struct {
	mock *MockPermissionChecker
}

// NewMockPermissionChecker creates a new mock instance
func NewMockPermissionChecker(ctrl *gomock.Controller) *MockPermissionChecker {
	mock := &MockPermissionChecker{ctrl: ctrl}
	mock.recorder = &MockPermissionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionChecker) EXPECT() *MockPermissionCheckerMockRecorder {
	return m.recorder
}

// GetNotPermittedPolicyRules mocks base method
func (m *MockPermissionChecker) GetNotPermittedPolicyRules(policies []v1.PolicyRule, namespace string) ([]v1.PolicyRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotPermittedPolicyRules", policies, namespace)
	ret0, _ := ret[0].([]v1.PolicyRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotPermittedPolicyRules indicates an expected call of GetNotPermittedPolicyRules
func (mr *MockPermissionCheckerMockRecorder) GetNotPermittedPolicyRules(policies, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotPermittedPolicyRules", reflect.TypeOf((*MockPermissionChecker)(nil).GetNotPermittedPolicyRules), policies, namespace)
}
