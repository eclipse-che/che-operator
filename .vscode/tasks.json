{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile che-operator code",
            "command": "make compile",
            "options": {
                "env": {
                    "ARCH": "amd64"
                }
            },
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Format che-operator code",
            "command": "go fmt ./...",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Fix che-operator imports",
            "command": "find . -not -path \"./vendor/*\" -name '*.go' -exec goimports -l -w {} \\;",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update golang dependencies",
            "command": "go mod tidy; go mod vendor",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Run che-operator tests",
            "command": "go test -mod=vendor -v ./...",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "options": {
                "env": {
                    "MOCK_API": "true"
                }
            },
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update resources",
            "command": "make update-resources -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update CR/CRDs",
            "command": "make generate manifests -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push custom che-operator image: '${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:next'",
            "command": "make docker-build docker-push IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:next\"",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install OLM on the cluster",
            "command": "operator-sdk olm install",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push development bundle Kubernetes platform",
            "command": "export BUNDLE_IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator-bundle:v0.0.1\"; export IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:next\";make bundle IMG=\"${IMG}\" platform=\"${PLATFORM}\" channel=\"${CHANNEL}\" -s; make bundle-build bundle-push -s BUNDLE_IMG=\"${BUNDLE_IMG}\" platform=\"${PLATFORM}\" channel=\"${CHANNEL}\"",
            "type": "shell",
            "args": [],
            "options": {  
            "env": {
                    "PLATFORM": "kubernetes",
                    "CHANNEL": "next",
                }
            },
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push development bundle Openshift platform",
            "command": "export BUNDLE_IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator-bundle:v0.0.1\"; IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:next\"; make bundle IMG=\"${IMG}\" platform=\"${PLATFORM}\" channel=\"${CHANNEL}\" -s; make bundle-build bundle-push -s BUNDLE_IMG=\"${BUNDLE_IMG}\" platform=\"${PLATFORM}\" channel=\"${CHANNEL}\"",
            "type": "shell",
            "args": [],
            "options": {  
            "env": {
                    "PLATFORM": "openshift",
                    "CHANNEL": "next",
                }
            },
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install che-operator via OLM",
            "command": "export BUNDLE_IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator-bundle:v0.0.1\"; kubectl apply -f config/manager/controller-namespace.yaml; operator-sdk run bundle \"${BUNDLE_IMG}\" --namespace \"${NAMESPACE}\"; kubectl apply -f config/samples/org.eclipse.che_v1_checluster.yaml -n \"${NAMESPACE}\"",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "eclipse-che"
                }
            }
        },
        {
            "label": "UnInstall che-operator via OLM Openshift",
            "command": "operator-sdk cleanup eclipse-che-preview-openshift --namespace ${NAMESPACE}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "eclipse-che"
                }
            }
        },
        {
            "label": "UnInstall che-operator via OLM Kubernetes",
            "command": "operator-sdk cleanup eclipse-che-preview-kubernetes --namespace ${NAMESPACE}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "eclipse-che"
                }
            }
        },
        {
            "label": "Install che-operator outside cluster",
            "command": "make -s apply-cr-crd; make create-full-env-file -s; set -a; . /tmp/che-operator-debug.env; set +a; kubectl apply -f config/samples/org.eclipse.che_v1_checluster.yaml -n ${WATCH_NAMESPACE}; make -s run",
            "type": "shell",
            "options": {
                "env": {
                    "CHE_FLAVOR": "che",
                    "CONSOLE_LINK_NAME": "che",
                    "CONSOLE_LINK_DISPLAY_NAME": "Eclipse Che",
                    "CONSOLE_LINK_SECTION": "Red Hat Applications",
                    "CONSOLE_LINK_IMAGE": "/dashboard/assets/branding/loader.svg",
                    "CHE_IDENTITY_SECRET": "che-identity-secret",
                    "CHE_IDENTITY_POSTGRES_SECRET": "che-identity-postgres-secret",
                    "CHE_POSTGRES_SECRET": "che-postgres-secret",
                    "CHE_SERVER_TRUST_STORE_CONFIGMAP_NAME": "ca-certs"
                }
            },
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "UnInstall Che outside cluster",
            "command": "kubectl patch checluster eclipse-che -p '{\"metadata\":{\"finalizers\":null}}' --type=merge -n ${NAMESPACE}; kubectl delete -f config/samples/org.eclipse.che_v1_checluster.yaml -n ${NAMESPACE}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "eclipse-che"
                }
            }
        },
        {
            "label": "Deploy che-operator",
            "command": "make deploy IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:next\" -s; kubectl apply -f config/samples/org.eclipse.che_v1_checluster.yaml -n eclipse-che",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "UnDeploy che-operator",
            "command": "make undeploy",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Await debugger attach for che-operator",
            "command": "make debug -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "[CRD beta(Minishift)] Await debugger attach for che-operator",
            "command": "make debug -s ECLIPSE_CHE_CRD='config/crd/bases/org_v1_che_crd-v1beta1.yaml'",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        }
    ]
}
