#
#  Copyright (c) 2012-2021 Red Hat, Inc.
#    This program and the accompanying materials are made
#    available under the terms of the Eclipse Public License 2.0
#    which is available at https://www.eclipse.org/legal/epl-2.0/
#
#  SPDX-License-Identifier: EPL-2.0
#
#  Contributors:
#    Red Hat, Inc. - initial API and implementation

- op: replace
  path: /spec/description
  value: |
    A collaborative Kubernetes-native development solution that delivers Kubernetes workspaces and in-browser IDE for rapid cloud application development.
    This operator installs PostgreSQL, Keycloak, Registries and the Eclipse Che server, as well as configures all these services.
    
    ## Prerequisites
    - Operator Lifecycle Manager (OLM) needs to be installed.

    ## How to Install
    Install `Eclipse Che Operator` by following instructions in top right button `Install`.

    A new pod che-operator is created in `my-eclipse-che` namespace

    ```
    $ kubectl get pods --all-namespaces | grep my-eclipse-che
    my-eclipse-che   che-operator-554c564476-fl98z                           1/1     Running   0          13s
    ```

    The operator is now providing new Custom Resources Definitions: `checluster.org.eclipse.che`

    Create a new Eclipse Che instance by creating a new CheCluster resource:

    On the bottom of this page, there is a section `Custom Resource Definitions` with `Eclipse Che Cluster` name.

    Click on `View YAML Example` *Link* and copy the content to a new file named `my-eclipse-che.yaml`
    **Important!** Make sure you provide **K8s.ingressDomain** which is a global ingress domain of your k8s cluster, for example, `gcp.my-ide.cloud`
    Create the new CheCluster by creating the resource in the `my-eclipse-che` namespace :
    ```
    $ kubectl create -f my-eclipse-che.yaml -n my-eclipse-che
    ```
    ***important:*** The operator is only tracking resources in its own namespace. If CheCluster is not created in this namespace it's ignored.
    The operator will now create pods for Eclipse Che. The deployment status can be tracked by looking at the Operator logs by using the command:
    ```
    $ kubectl logs -n my-eclipse-che che-operator-554c564476-fl98z
    ```
    ***important:*** pod name is different on each installation

    When all Eclipse Che containers are running, the Eclipse Che URL is printed


    Eclipse Che URL can be tracked by searching for available trace:
    ```
    $ kubectl logs -f -n my-eclipse-che che-operator-7b6b4bcb9c-m4m2m | grep "Eclipse Che is now available"
    time="2019-08-01T13:31:05Z" level=info msg="Eclipse Che is now available at: http://che-my-eclipse-che.gcp.my-ide.cloud"
    ```
    When Eclipse Che is ready, the Eclipse Che URL is displayed in CheCluster resource in `status` section
    ```
    $ kubectl describe checluster/eclipse-che -n my-eclipse-che
    ```

    ```
    Status:
      Che Cluster Running:           Available
      Che URL:                       http://che-my-eclipse-che.gcp.my-ide.cloud
      Che Version:                   7.26.0
      ...
    ```

    By opening this URL in a web browser, Eclipse Che is ready to use.

    ## Defaults
    By default, the operator deploys Eclipse Che with:
    * Bundled PostgreSQL and Keycloak
    * Common PVC strategy
    * Auto-generated passwords
    * TLS mode (secure ingresses)

    ## Installation Options
    Eclipse Che operator installation options include:
    * Connection to external database and Keycloak
    * Configuration of default passwords and object names
    * PVC strategy (once shared PVC for all workspaces, PVC per workspace, or PVC per volume)
    * Authentication options

    ### External Database and Keycloak
    To instruct the operator to skip deploying PostgreSQL and Keycloak and connect to an existing DB and Keycloak instead:
    * set respective fields to `true` in a custom resource spec
    * provide the operator with connection and authentication details:
      ```
      externalDb: true
      chePostgresHostname: 'yourPostgresHost'
      chePostgresPort: '5432'
      chePostgresUser: 'myuser'
      chePostgresPassword: 'mypass'
      chePostgresDb: 'mydb'
      externalIdentityProvider: true
      identityProviderURL: 'https://my-keycloak.com'
      identityProviderRealm: 'myrealm'
      identityProviderClientId: 'myClient'
      ```
    #### Self-signed Certificates and TLS Secrets

    Eclipse Che uses self-signed certificates by default, as TLS mode is on by default.

    To provide the name of the tls secret that will be used for Eclipse Che and workspaces ingresses:
    ```
    tlsSecretName: 'my-ingress-tls-secret'
    ```
